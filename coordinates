#! /usr/share/python3.4

import RPi.GPIO as gpio
import time
import re
from  tkinter import *
from svgpathtools import svg2paths, wsvg, svg2paths2
import math
import configparser

gpio.setmode(gpio.BOARD)
gpio.setup(18, gpio.OUT)									#Motor 3, links
gpio.setup(33, gpio.OUT)									#Motor 3, rechts
gpio.setup(35, gpio.OUT)									#Motoren 1 und 2, vorwärts
gpio.setup(37, gpio.OUT)									#Motoren 1 und 2, rückwärts
gpio.setup(29, gpio.OUT)									#servo
gpio.setup(32, gpio.IN, pull_up_down = gpio.PUD_DOWN)		#Schalter 1, vorwärts
gpio.setup(36, gpio.IN, pull_up_down = gpio.PUD_DOWN)		#Schalter 2, rückwärts
gpio.setup(38, gpio.IN, pull_up_down = gpio.PUD_DOWN)		#Schalter 3, links
gpio.setup(40, gpio.IN, pull_up_down = gpio.PUD_DOWN)		#Schalter 4, rechts
gpio.setup(22, gpio.OUT)									#Fräsmotor, an/aus
s = gpio.PWM(29, 50)										#Servo PWM
right = gpio.PWM(33, 100)									#Motor 3 PWM rechts
left = gpio.PWM(18, 100)									#Motor 3 PWM links
backward = gpio.PWM(37, 100)								#Motoren 1 und 2 PWM rückwärts
forward = gpio.PWM(35, 100)									#Motoren 1 und 2 PWM vorwärts

config = configparser.RawConfigParser()
config.read("config.cfg")

lx = config.getfloat("general", "xlen")						#Länge der X-Achse, vom Nutzer eingegeben und gespeichert
ly = config.getfloat("general", "ylen")						#Länge der Y-Achse, -"-

def calibrate():											#Wenn gewünscht oder nicht min. 1 mal durchgeführt, kalibrieren sich die Motoren
	calibration = Tk()
	calibration.title("Einen Moment bitte...")
	calibration.geometry("%dx%d+%d+%d" % (150,150,((calibration.winfo_screenwidth()/2)-75),((calibration.winfo_screenheight()/2)-75)))
	calibration.overrideredirect(True)
	callbl = Label(
			master=calibration,
			font=("Arial", 15),
			text="Die Fräse wird kalibriert. Bitte warten Sie einen Moment.",
			wraplength=130
			)
	callbl.pack()
	callbl.mainloop()
	gpio.output(33, 1)
	gpio.wait_for_edge(40, gpio.RISING)			
	gpio.output(33, 0)
	startx = time.time()
	gpio.output(18, 1)
	gpio.wait_for_edge(38, gpio.RISING)
	gpio.output(18, 0)
	endx = time.time()
	timex = endx - startx
	global xunit
	xunit = timex/(lx*10)					#xunit legt fest, wie lange der Motor braucht, um sich um eine Koorinaten-Einheit auf der X-Achse zu bewegen
	global currx
	currx = 0
	gpio.output(35, 1)
	gpio.wait_for_edge(32, gpio.RISING)			
	gpio.output(35, 0)	
	starty = time.time()
	gpio.output(37, 1)
	gpio.wait_for_edge(36, gpio.RISING)
	gpio.output(37, 0)
	endy = time.time()
	timey = endy - starty
	global yunit		
	yunit = timey/(ly*10)					#selbiges für die Y-Achse
	print(yunit)			
	avunit = (xunit+yunit)/2				#Mittel der beiden Einheiten
	global curry
	curry = 0
	config.set("general","iscal",1)
	config.set("general","xunit", xunit)
	config.set("general","yunit", yunit)
	config.set("general","avunit", avunit)
	with open("config.cfg","wt") as configfile:		#es wird gespeichert, dass die Fräse kalibriert wurde
		config.write(configfile)
	calibration.destroy()
	window()
def load():
	global file, path, attr, paths, attributes, svg_attributes
	file = file_path.get()
	try:
		path, attr = svg2paths(file)
		paths, attributes, svg_attributes = svg2paths2(file)
		print(file)
		status.config(text="Datei geladen", fg="black")			#unten rechts wird im Hauptmenü angezeigt, dass die Datei geladen wurde bzw.
	except:
		status.config(text="Datei nicht gefunden", fg="red")	#nicht gefunden wurde
			
def main():
	def ok():													#wird aufgerufen, wenn der OK-Button im Startmenü geklickt wurde
		global calibrate
		if iscal == 1  and checkcal.get() == 0:					#analysiert, ob bereits kalibriert wurde bzw. dies gewünscht wird
			if (float(xentry.get()) != config.getfloat("general","xlen") or float(yentry.get()) != config.getfloat("general","ylen")) or (float(xentry.get()) != config.getfloat("general","xlen") and float(yentry.get()) != config.getfloat("general","ylen")):
				error2 = Tk()
				error2.title("Error2")
				error2.geometry("%dx%d+%d+%d" % (150,150,((error2.winfo_screenwidth()/2)-75),((error2.winfo_screenheight()/2)-75)))
				error2lbl = Label(
						master=error2,
						font=("Arial", 15),
						text="Die Fräse muss kalibriert werden!",
						wraplength=130
						)
				error2lbl.pack()
				error2.mainloop()
			else:
				print("Ok", checkshow)
				config.set("general","showint",checkshow.get()) 
				try:
					config.set("general","xlen",float(xentry.get()))
					config.set("general","ylen",float(yentry.get()))
				except:
					error1 = Tk()
					error1.title("Error1")
					error1.geometry("%dx%d+%d+%d" % (150,150,((error1.winfo_screenwidth()/2)-75),((error1.winfo_screenheight()/2)-75)))
					errorlbl = Label(
							master=error1,
							font=("Arial", 15),
							text="Geben Sie die Länge der X- und Y-Achse in Dezimalzahlen ein!",
							wraplength=130
							)
					errorlbl.pack()
					error1.mainloop()
				with open("config.cfg", "wt") as configfile:
					config.write(configfile)
				info.destroy()
				if checkcal.get()==1:
					calibrate()
				else:
					window()
		elif iscal == 0 and checkcal.get() == 0:
			error2 = Tk()
			error2.title("Error2")
			error2.geometry("%dx%d+%d+%d" % (150,150,((error2.winfo_screenwidth()/2)-75),((error2.winfo_screenheight()/2)-75)))
			error2lbl = Label(
					master=error2,
					font=("Arial", 15),
					text="Die Fräse muss kalibriert werden!",
					wraplength=130
					)
			error2lbl.pack()
			error2.mainloop()

		else:	
			print("Ok", checkshow)
			config.set("general","showint",checkshow.get()) 
			try:
				config.set("general","xlen",float(xentry.get()))
				config.set("general","ylen",float(yentry.get()))
			except:
				error1 = Tk()
				error1.title("Error1")
				error1.geometry("%dx%d+%d+%d" % (150,150,((error1.winfo_screenwidth()/2)-75),((error1.winfo_screenheight()/2)-75)))
				errorlbl = Label(
						master=error1,
						font=("Arial", 15),
						text="Geben Sie die Länge der X- und Y-Achse in Dezimalzahlen ein!",
						wraplength=130
						)
				errorlbl.pack()
				error1.mainloop()
			with open("config.cfg", "wt") as configfile:
				config.write(configfile)
			info.destroy()
			if checkcal.get()==1:
				calibrate()
			else:
				window()
	def end():							#aufgerufen, wenn der Abbrechen-Button geklickt wurde
		print("end")
		info.destroy()
	
	iscal = config.getint("general", "iscal")
	showint = config.getint("general", "showint")
	if showint == 0:
		info = Tk()
		info.title("Erster Programmstart")
		info.geometry("%dx%d+%d+%d" % (300,400,((info.winfo_screenwidth()/2)-150),((info.winfo_screenheight()/2)-200)))
		global checkcal
		checkshow=IntVar()		
		checkcal=IntVar()
		

		ilabel = Label(
				master=info,
				font=("Arial", 15),
				text="Sie starten das Programm zum ersten Mal. Bitte geben Sie die Länge der X- und Y-Achse in cm ein.",
				padx=10,
				pady=10,
				wraplength=280
				)
		xlabel=Label(
				master=info,
				font=("Arial", 15),
				text="X-Achse [cm]:",
				padx=10
				)
		xentry=Entry(
				master=info,
				font=("Arial", 15),
				width=10
				)
		ylabel=Label(
				master=info,
				font=("Arial", 15),
				text="Y-Achse [cm]:",
				padx=10
				)
		yentry=Entry(
				master=info,
				font=("Arial", 15),
				width=10
				)
		calibrate=Checkbutton(
					master=info,
					font=("Arial", 15),
					text="Fräse kalibrieren",
					padx=10,
					onvalue=1,
					variable=checkcal
					)
		calibrate.select()
		show=Checkbutton(
				master=info,
				font=("Arial", 15),
				text="Nicht erneut anzeigen",
				padx=10,
				onvalue=1,
				variable=checkshow
				)
		show.select()
		ok=Button(
			master=info,
			font=("Arial", 15),
			text="  Weiter  ",
			command=ok
			)
		end=Button(
			master=info,
			font=("Arial", 15),
			text="Abbrechen",
			command=end
			)
		ilabel.place(x=0,y=0)
		xlabel.place(x=0,y=140)
		xentry.place(x=140,y=140)
		ylabel.place(x=0,y=180)
		yentry.place(x=140,y=180)
		calibrate.place(x=0,y=220)
		show.place(x=0,y=250)
		ok.place(x=35,y=300)
		end.place(x=150,y=300) 
		
	
		info.mainloop()
	elif showint == 1:
		window()
		
def calc():
	global path_attr, listx, listy, listw, n, c, currx, curry, path, attr, paths, attributes, svg_attributes, xunit, yunit, avunit
	xunit = config.getfloat("general", "xunit")
	yunit = config.getfloat("general", "yunit")
	currx = 0
	curry = 0
	try:
		strpath= str(path)
		path_attr = attributes[0]
		listx = re.findall("\d+[\.]?\d*", strpath)
		counter = 0
		listy = []
		listw = re.findall(r'L|A', strpath) 
		arcs = 0
	except:
		print("file not found")
		gpio.cleanup()
		exit()
	for arcs in range(listw.count("A")):
		listx.remove("0.0")
		arcs += 1
	length = int(len(listx)/2)					#Variable benötigt, da sich die Länge ändert
	for counter in range(length):
		listy.append(listx.pop(counter+1))
	status.config(text="Fräsvorgang läuft...", fg="orange")
	n = 0			#Nummer des zu bearbeitenden Pfades
	c = 0			#Nummer der zu bearbeitenden Koordinaten
	print(listx)
	print(listy)
	read()

def showmenu():
	config.set("general","showint",0)
	status.config(text="Programmneustart erforderlich", fg="black")
	with open("config.cfg", "wt") as configfile:
		config.write(configfile)
def window():
	root = Tk()
	root.title("Fräse")
	root.geometry("%dx%d+%d+%d" % (700,300,((root.winfo_screenwidth()/2)-350),((root.winfo_screenheight()/2)-150)))
	global file_path
	file_path=StringVar()	

	da = Label	(	
			master=root,
			text="Dateipfad:",
			font=("Arial", 15)
			)
	file_path = Entry(
			master = root,
			font=("Arial", 15),
			textvariable=file_path
			)
	dl = Button	(
			master=root,
			text=" Datei laden  ",
			font=("Arial", 15),
			command=load
			)
	menu = Button(
			master=root,
			font=("Arial", 15),
			text="Startmenü anzeigen",
			command=showmenu
			)
	global status
	status = Label	(
			master=root,
			text="Bitte Dateipfad eingeben",
			font=("Arial", 15)
			)
	start = Button(
			master=root,
			text="Fräse starten",
			font=("Arial", 15),
			command=calc
			)
	da.place(x=0,y=10)
	file_path.place(x=100, y=10)
	dl.place(x=350,y=8)
	status.pack(side = BOTTOM, anchor=E)
	start.place(x=350,y=50)
	menu.place(x=500,y=8)	
	root.mainloop()
		
def read():								#coordinates are read into x/y list
	global startx, starty, rad, la, sweep, endx, endy, n, c, rx, ry, cx, cy, path_attr
	
	if n >= int(len(listw)):
		print("Done")
		status.config(text="Abgeschlossen", fg="green")
		#gpio.cleanup()
		#exit()
	else:
		pass
	if listw[n] == "L":						#wenn der zu bearbeitende Pfad eine Linie ist....
		startx = float(listx[c])
		starty = float(listy[c])
		endx = float(listx[c+1])
		endy = float(listy[c+1])

		n += 1								#
		c += 2								#zu bearbeitende Koordinaten werden aktualisiert
		line()

	elif listw[n] == "A":						#searches for arc element
		startx = float(listx[c])	
		starty = float(listy[c])
		rx = float(listx[c+1])
		ry = float(listy[c+1])	
	#	la = listx[c+2]							#nicht verwendet
	#	sweep = listy[c+2]						#nicht verwendet
		endx = float(listx[c+2])
		endy = float(listy[c+2])
		cx = float(path_attr["sodipodi:cx"])
		cy = float(path_attr["sodipodi:cy"])
		n += 1
		c += 3
		
		arc()
	elif listw[n] == "C":
		startx = float(listx[c])
		starty = float(listy[c])
		c1x = float(listx[c+1])
		c1y = float(listy[c+1])
		c2x = float(listx[c+2])
		c2y = float(listy[c+2])
		endx = float(listx[c+3])
		endy = float(listy[c+3])
		n += 1
		c += 4
		
		cubic()
	elif listw[n] == "Q":
		startx = float(listx[c])
		starty = float(listy[c])
		c1x = float(listx[c+1])
		c1y = float(listy[c+1])
		endx = float(listx[c+2])
		endy = float(listy[c+2])
		n += 1
		c += 3
	else:
		print("Error!")
		gpio.cleanup()
		exit()
def line():	
	global currx, curry, startx, starty, endx, endy, xunit, yunit

	diffx = currx - startx
	diffy = curry - starty	
	avunit = config.getfloat("general", "avunit")
	
	if diffx < 0:
		movex = math.fabs(diffx)
		gpio.output(33, 1)
		time.sleep(movex*xunit)
		gpio.output(33, 0)
	elif diffx > 0:
		movex = diffx
		gpio.output(18, 1)
		time.sleep(movex*xunit)
		gpio.output(18, 0)
	elif diffx == 0:
		print("x is ready!")
	else:
		print("Error!")
		gpio.cleanup()
		exit()
	if diffy < 0:
		movey = math.fabs(diffy)
		gpio.output(35, 1)
		time.sleep(movey*yunit)
		gpio.output(35, 0)
	
	elif diffy > 0:
		movey = diffy
		gpio.output(37, 1)
		time.sleep(diffy*yunit)
		gpio.output(37, 0)
		
	elif diffy == 0:
		print("y is ready!")
		
	else:
		print("Error!")
		gpio.cleanup()
		exit()
		
	currx = startx
	curry = starty
	

	gpio.output(22, 1)
	s.start(10.3)
	s.ChangeDutyCycle(11.5)
	
	diffx = currx - endx
	diffy = curry - endy

	if diffx == 0 or diffy == 0:	
		
		if diffx < 0:
			movex = math.fabs(diffx)
			gpio.output(33, 1)
			time.sleep(movex*xunit)
			gpio.output(33, 0)
		elif diffx > 0:
			movex = diffx
			gpio.output(18, 1)
			time.sleep(movex*avunit)
			gpio.output(18, 0)
		elif diffx == 0:
			print("x is ready!")
		else:
			print("Error!")
			gpio.cleanup()
			exit()
		
		if diffy < 0:
			movey = math.fabs(diffy)
			gpio.output(35, 1)
			time.sleep(movey*yunit)
			gpio.output(35, 0)
		elif diffy > 0:
			movey = diffy
			gpio.output(37, 1)
			time.sleep(movey*yunit)
			gpio.output(37, 0)
		elif diffy == 0:
			print("y is ready!")
		else:
			print("Error!")
			gpio.cleanup()
			exit()
	elif not diffx == 0 and not diffy == 0:
		#vx = 100
		#vy = 100/diffx*diffy
		#t = diffx*xunit
		right.start(0)
		left.start(0)
		backward.start(0)
		forward.start(0)
		if diffx > 0 and diffy > 0:
			if diffx > diffy:
				right.ChangeDutyCycle(100)
				backward.ChangeDutyCycle(100/diffx*diffy)
				time.sleep(diffx*xunit)
				right.ChangeDutyCycle(0)
				backward.ChangeDutyCycle(0)
				read()
			elif diffy > diffx:
				backward.ChangeDutyCycle(100)
				right.ChangeDutyCycle(100/diffy*diffx)
				time.sleep(diffy*yunit)
				backward.ChangeDutyCycle(0)
				right.ChangeDutyCycle(0)
				read()
			elif diffx == math.fabs(diffy):
				forward.ChangeDutyCycle(100)
				left.ChangeDutyCycle(100)
				time.sleep(diffx*xunit)
			else:
				print("Error in line()")
				gpio.cleanup()
				exit()
		elif diffx > 0 and diffy < 0:
			if diffx > math.fabs(diffy):
				left.ChangeDutyCycle(100)
				forward.ChangeDutyCycle(100/diffx*math.fabs(diffy))
				time.sleep(diffx*xunit)
				left.ChangeDutyCycle(0)
				forward.ChangeDutyCycle(0)
				read()
			elif math.fabs(diffy) > diffx:
				forward.ChangeDutyCycle(100)
				left.ChangeDutyCycle(100/math.fabs(diffy)*diffx)
				time.sleep(math.fabs(diffy)*yunit)
				forward.ChangeDutyCycle(0)
				left.ChangeDutyCycle(0)
				read()
			elif diffx == math.fabs(diffy):
				forward.ChangeDutyCycle(100)
				left.ChangeDutyCycle(100)
				time.sleep(diffx*xunit)
				forward.ChangeDutyCycle(0)
				left.ChangeDutyCycle(0)
				read()
			else:
				print("Error in line()")
				gpio.cleanup()
				exit()
		elif diffx < 0 and diffy > 0:
			if diffy > math.fabs(diffx):
				backward.ChangeDutyCycle(100)
				left.ChangeDutyCycle(100/diffy*math.fabs(diffx))
				time.sleep(diffy*yunit)
				backward.ChangeDutyCycle(0)
				left.ChangeDutyCycle(0)
				read()
			elif diffy < math.fabs(diffx):
				left.ChangeDutyCycle(100)
				backward.ChangeDutyCycle(100/math.fabs(diffx)*diffy)
				time.sleep(math.fabs(diffx)*xunit)
				backward.ChangeDutyCycle(0)
				left.ChangeDutyCycle(0)
				read()
			elif diffy == math.fabs(diffx):
				left.ChangeDutyCycle(100)
				backward.ChangeDutyCycle(100)
				time.sleep(diffy*yunit)
				left.ChangeDutyCycle(0)
				backward.ChangeDutyCycle(0)
				read()
			else:
				print("Error in line()")
				gpio.cleanup()
				exit()
		elif diffx < 0 and diffy < 0:
			if math.fabs(diffy) > math.fabs(diffx):
				forward.ChangeDutyCycle(100)
				right.ChangeDutyCycle(100/diffy*diffx)
				time.sleep(math.fabs(diffy)*yunit)
				forward.ChangeDutyCycle(0)
				right.ChangeDutyCycle(0)
				read()
			elif math.fabs(diffy) < math.fabs(diffx):
				right.ChangeDutyCycle(100)
				forward.ChangeDutyCycle	(100/diffx*diffy)
				time.sleep(math.fabs(diffx)*xunit)
				right.ChangeDutyCycle(0)
				forward.ChangeDutyCycle(0)
				read()
			elif diffy == diffx:
				right.ChangeDutyCycle(100)
				forward.ChangeDutyCycle(100)
				time.sleep(math.fabs(diffx)*xunit)
				right.ChangeDutyCycle(0)
				forward.ChangeDutyCycle(0)
				read()
		else:
			print("Error in line()")
			gpio.cleanup()
			exit()
	else:
		print("Error in Line()")	
	currx = endx
	curry = endy
	
	s.ChangeDutyCycle(10.3)
	gpio.output(22, 0)
	read()
		
	 
def arc():
	global cx, cy, rx, ry, startx, starty, endx, endy
	print(cx, cy, rx, ry, startx, starty, endx, endy)
	run = 0
	listcox = [startx]
	listcoy = [starty]
	if startx > endx:
		for run in range(100):									#101, da der erste Punkt dem Startpunkt entspricht
			#listcox.append(startx-((startx-endx)/101*run))
			
			sqrt = math.sqrt((4*(rx**2)*(ry**2)-4*(ry**2)*(cx**2)+8*(ry**2)*cx*listcox[run]-4*(ry**2)*(listcox[run]**2))/(4*(rx**2)))
			sqrt2 = math.sqrt((4*(ry**2)*(rx**2)-4*(rx**2)*(cy**2)+8*(rx**2)*cy*listcoy[run]-4*(rx**2)*(listcoy[run]**2))/(4*(ry**2)))
			if starty >= cy and endy >= cy:
				listcox.append(startx-((startx-endx)/100*run))
				listcoy.append(cy+sqrt)
			elif starty <= cy and endy <= cy:
				listcox.append(startx-((startx-endx)/100*run))
				listcoy.append(cy-sqrt)
			elif starty >= cy and endy <= cy:
				listcoy.append(starty-((starty-endy)/100*run))
				listcox.append(cx+sqrt2)
			elif starty <= cy and endy >= cy:
				listcoy.append(starty-((starty-endy)/100*run))
				listcox.append(cx-sqrt2)
			else:
				print(starty,endy,cy)
				print("Error while calculating y in arc()")
				gpio.cleanup()
				exit()
	elif endx > startx:
		for run in range(101):
			cox = startx-((startx-endx)/100*run)
			listcox.append(cox)
			sqrt = math.sqrt((4*(rx**2)*(ry**2)-4*(ry**2)*(cx**2)+8*(ry**2)*cx*listcox[run]-4*(ry**2)*(listcox[run]**2))/(4*(rx**2)))
			if starty >= cy and endy >= cy:
				listcoy.append(cy+sqrt)
			elif starty <= cy and endy <= cy:
				listcoy.append(cy-sqrt)
			else:
				print("Error2 while calculating y in arc()")
				gpio.cleanup()
				exit()
	else:
		print("Arc: startx equals endx, you may check this")
	print(listcox)
	print(listcoy)
	start_milling(listcox, listcoy)

def quadratic():
	global startx, starty, c1x, c1y, endx, endy
	listcox = []
	listcoy = []
	
	for i in range(101):				#101, da der erste Punkt dem Startpunkt entspricht
		t=i/101
		listcox.append(((startx -(startx-c1x)*t) -((startx -(startx-c1x)*t)-(c1x -(c1x-endx)*t)))*t)
		listcoy.append(((starty -(starty-c1y)*t) -((starty -(starty-c1y)*t)-(c1y -(c1y-endy)*t)))*t)
	start_milling(listcox, listcoy)
def cubic():
	global startx, starty, c1x, c1y, c2x, c2y, endx, endy
	listcox = []
	listcoy = []
	
	for i in range(101):				#in der Berechnung sind womöglich unnötige Klammern gesetzt, aus Sicherheitsgründen werden aallerdings keine Änderungen vorgenommen
		t=i/101
		listcox.append(((startx-(startx-c1x)*t)-((startx-(startx-c1x)*t)-(c1x-(c1x-c2x)*t))*t)-(((startx-(startx-c1x)*t)-((startx-(startx-c1x)*t)-(c1x-(c1x-c2x)*t))*t)-((c1x-(c1x-c2x)*t)-((c1x-(c1x-c2x)*t)-(c2x-(c2x-endx)*t))*t))*t)
		listcoy.append(((starty-(starty-c1y)*t)-((starty-(starty-c1y)*t)-(c1y-(c1y-c2y)*t))*t)-(((starty-(starty-c1y)*t)-((starty-(starty-c1y)*t)-(c1y-(c1y-c2y)*t))*t)-((c1y-(c1y-c2y)*t)-((c1y-(c1y-c2y)*t)-(c2y-(c2y-endy)*t))*t))*t)
	
	start_milling(listcox, listcoy)

def start_milling(listcox,listcoy):
	global currx, curry, xunit, yunit
	avunit = config.getfloat("general", "avunit")
	right.start(0)
	left.start(0)
	backward.start(0)
	forward.start(0)
	print("milling started")
	milling_on = 0
	for run in range(101):
		print(len(listcox), len(listcoy))
		print(run)
		if milling_on:						#nach dem ersten Durchlauf, wenn der Fräskopf Startposition des Beziers erreicht hat, wird der Fräsmotor angeschalten
			gpio.output(22, 1)
			s.ChangeDutyCycle(11.5)
		else:
			pass
		if currx <= listcox[run] and curry <= listcoy[run]:
			if listcox[run]-currx > listcoy[run]-curry:
				right.ChangeDutyCycle(100)
				backward.ChangeDutyCycle(100/(listcox[run]-currx)*(listcoy[run]-curry))
				time.sleep((listcox[run]-currx)*xunit)
				right.ChangeDutyCycle(0)
				backward.ChangeDutyCycle(0)
			elif listcox[run]-currx < listcoy[run]-curry:
				backward.ChangeDutyCycle(100)
				right.ChangeDutyCycle(100/(listcoy[run]-curry)*(listcox[run]-currx))
				time.sleep((listcoy[run]-curry)*yunit)
				backward.ChangeDutyCycle(0)
				right.ChangeDutyCycle(0)
			elif listcox[run]-currx == listcoy[run]-curry:
				right.ChangeDutyCycle(100)
				backward.ChangeDutyCycle(100)
				time.sleep((listcox[run]-currx)*avunit)
				right.ChangeDutyCycle(0)
				backward.ChangeDutyCycle(0)
			else:
				print("Error in quadratic()")
				gpio.cleanup()
				exit()			
		elif currx <= listcox[run] and curry >= listcoy[run]:
			if listcox[run]-currx > curry-listcoy[run]:
				right.ChangeDutyCycle(100)
				forward.ChangeDutyCycle(100/(listcox[run]-currx)*(curry-listcoy[run]))
				time.sleep((listcox[run]-currx)*xunit)
				right.ChangeDutyCycle(0)
				forward.ChangeDutyCycle(0)
			elif listcox[run]-currx < curry-listcoy[run]:
				forward.ChangeDutyCycle(100)
				right.ChangeDutyCycle(100/(curry-listcoy[run])*(listcox[run]-currx))
				time.sleep((curry-listcoy[run])*yunit)
				forward.ChangeDutyCycle(0)
				right.ChangeDutyCycle(0)
			elif  listcox[run]-currx == curry-listcoy[run]:
				right.ChangeDutyCycle(100)
				forward.ChangeDutyCycle(100)
				time.sleep((listcox[run]-currx)*avunit)
				right.ChangeDutyCycle(0)
				forward.ChangeDutyCycle(0)
			else:
				print("Error in quadratic()")
				gpio.cleanup()
				exit()
		elif currx >= listcox[run] and curry <= listcoy[run]:
			if currx-listcox[run] > listcoy[run]-curry:
				left.ChangeDutyCycle(100)
				backward.ChangeDutyCycle(100/(currx-listcox[run])*(listcoy[run]-curry))
				time.sleep((currx-listcox[run])*xunit)
				left.ChangeDutyCycle(0)
				backward.ChangeDutyCycle(0)
			elif currx-listcox[run] < listcoy[run]-curry:
				backward.ChangeDutyCycle(100)
				left.ChangeDutyCycle(100/(listcoy[run]-curry)*(currx-listcox[run]))
				time.sleep((listcoy[run]-curry)*yunit)
				backward.ChangeDutyCycle(0)
				left.ChangeDutyCycle(0)
			elif currx-listcox[run] == listcoy[run]-curry:
				left.ChangeDutyCycle(100)
				backwards.ChangeDutyCycle(100)
				time.sleep((currx-listcox[run])*avunit)
				left.ChangeDutyCycle(0)
				backward.ChangeDutyCycle(0)
			else:
				print("Error in quadratic()")
				gpio.cleanup()
				exit()
		elif currx >= listcox[run] and curry >= listcoy[run]:
			if currx-listcox[run] > curry-listcoy[run]:
				left.ChangeDutyCycle(100)
				forward.ChangeDutyCycle(100/(currx-listcox[run])*(curry-listcoy[run]))
				time.sleep((currx-listcox[run])*xunit)
				left.ChangeDutyCycle(0)
				forward.ChangeDutyCycle(0)
			elif currx-listcox[run] < curry-listcoy[run]:
				forward.ChangeDutyCycle(100)
				left.ChangeDutyCycle(100/(curry-listcoy[run])*(currx-listcox[run]))
				time.sleep((curry-listcoy[run])*yunit)
				forward.ChangeDutyCycle(0)
				left.ChangeDutyCycle(0)
			elif currx-listcox[run] == curry-listcoy[run]:
				left.ChangeDutyCycle(100)
				forward.ChangeDutyCycle(100)
				time.sleep((currx-listcox[run])*avunit)
				left.ChangeDutyCycle(0)
				forward.ChangeDutyCycle(0)
			else:
				print("Error in quadratic()")
				gpio.cleanup()
				exit()
		else:
			print("Error in quadratic()")
			gpio.cleanup()
		currx = listcox[run]
		curry = listcoy[run]
		milling_on = 1
	gpio.output(22, 0)
	s.ChangeDutyCycle(10.3)
	currx = endx
	curry = endy
	read()


if __name__=="__main__":
	main()
